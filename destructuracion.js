// ========================================================
// üìò Gu√≠a r√°pida: Desestructuraci√≥n en JavaScript
// ========================================================

/*
üîπ ¬øQu√© es?
La desestructuraci√≥n permite extraer valores de objetos o arrays
y asignarlos directamente a variables con menos c√≥digo.
*/

// ========================================================
// üß± Desestructuraci√≥n de OBJETOS
// ========================================================

let persona = { nombre: "Ana", edad: 25 };

// Extraer propiedades del objeto:
let { nombre, edad } = persona;
// nombre ‚Üí "Ana", edad ‚Üí 25

// Cambiar el nombre de las variables:
let { nombre: n } = persona;
// n ‚Üí "Ana"

// Valor por defecto si la propiedad no existe:
let { ciudad = "Desconocida" } = persona;
// ciudad ‚Üí "Desconocida"

// ========================================================
// üßä Desestructuraci√≥n de ARRAYS
// ========================================================

let colores = ["rojo", "verde", "azul"];

// Extraer elementos por posici√≥n:
let [uno, dos] = colores;
// uno ‚Üí "rojo", dos ‚Üí "verde"

// Saltarse elementos:
let [ , , tercero] = colores;
// tercero ‚Üí "azul"

// ========================================================
// üìù Desestructuraci√≥n en FUNCIONES
// ========================================================

function saludar({ nombre }) {
  console.log("Hola " + nombre);
}

saludar({ nombre: "Luis" }); // "Hola Luis"

// Tambi√©n funciona con arrays:
function mostrar([primero, segundo]) {
  console.log(primero, segundo);
}

mostrar(["uno", "dos"]); // "uno dos"

// ========================================================
// üîÅ Desestructuraci√≥n en BUCLES
// ========================================================

let usuarios = [
  { nombre: "Ana", edad: 22 },
  { nombre: "Luis", edad: 31 }
];

for (let { nombre, edad } of usuarios) {
  console.log(`${nombre} tiene ${edad} a√±os`);
}

// ========================================================
// üì¶ Desestructuraci√≥n ANIDADA
// ========================================================

let libro = {
  titulo: "1984",
  autor: {
    nombre: "George Orwell",
    pais: "Reino Unido"
  }
};

// Extraer propiedades anidadas:
let { autor: { nombre: autorNombre } } = libro;
// autorNombre ‚Üí "George Orwell"

// ========================================================
// ‚úÖ RESUMEN R√ÅPIDO
// ========================================================

/*
| Tipo                       | Ejemplo                                |
|----------------------------|----------------------------------------|
| Objeto                     | let {x, y} = objeto                    |
| Array                      | let [a, b] = array                     |
| Cambio de nombre (alias)   | let {x: nuevoNombre} = objeto         |
| Valor por defecto          | let {x = 10} = objeto                 |
| En funciones               | function f({x}) { ... }               |
| En bucles                  | for (let {x} of array) { ... }        |
| Anidado                    | let {a: {b}} = objeto                 |
*/

// ========================================================
// üü¢ Consejo final:
// ========================================================

/*
Usa la desestructuraci√≥n para:
‚úÖ Escribir menos c√≥digo.
‚úÖ Hacer el c√≥digo m√°s limpio y entendible.
‚úÖ Extraer datos f√°cilmente de objetos o arrays.

Muy √∫til en funciones, React, APIs y estructuras de datos complejas.
*/
