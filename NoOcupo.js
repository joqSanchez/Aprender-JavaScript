//              Symbols -> Crea identificadores unicos, utiles para evitar colisiones en objetos, incluso si los simbolos tienen la misma descripcion
//              Propiedades unicas, Simular propiedades privadas, cambiar comportamientos internos

/*const id = Symbol("id");

const persona = {
  nombre: "Joqsan",
  [id]: 123 // clave Ãºnica
};

console.log(persona[id]); // 123
*/


//  Agregar propiedades Ocultas  : NO aparecen en un for in asi que son como privadas

/*const secreto = Symbol("secreto");

const usuario = {
  nombre: "Luis",
  [secreto]: "123abc"
};

for (let clave in usuario) {
  console.log(clave); // Solo muestra 'nombre', no 'secreto'
}
*/



//JavaScript tiene sÃ­mbolos especiales para cambiar el comportamiento interno de objetos. Ejemplos:

/*Symbol.iterator â†’ permite hacer que un objeto sea iterable con for...of.
Symbol.toPrimitive â†’ personaliza cÃ³mo se convierte el objeto a string o nÃºmero.
Symbol.toStringTag â†’ define lo que devuelve Object.prototype.toString.

const obj = {
  [Symbol.toPrimitive](hint) {
    return hint === "number" ? 42 : "Hola";
  }
};

console.log(+obj);     // 42
console.log(`${obj}`); // "Hola"
*/



//          ConversiÃ³n de objeto a valor primitivo

/*Usando Symbol.toPrimitive

const obj1 = {
  [Symbol.toPrimitive](hint) {
    if (hint === "string") return "Texto";
    if (hint === "number") return 10;
    return "Por defecto";
  }
};

console.log(String(obj1)); // ðŸ‘‰ "Texto"        (hint = "string")
console.log(+obj1);        // ðŸ‘‰ 10             (hint = "number")
console.log(obj1 + "!");   // ðŸ‘‰ "Por defecto!" (hint = "default")
*/

/*Usando valueOf()
const obj2 = {
  valueOf() {
    return 100;
  }
};

console.log(+obj2);      // ðŸ‘‰ 100 (espera nÃºmero, usa valueOf)
console.log(obj2 + 1);   // ðŸ‘‰ 101

*/

/*Usando toString()
const obj3 = {
  toString() {
    return "Hola mundo";
  }
};

console.log(String(obj3));  // ðŸ‘‰ "Hola mundo"
console.log(obj3 + "!");    // ðŸ‘‰ "Hola mundo!"

*/

//      REGLA FINAL (memorizable): de ConversiÃ³n de objeto a valor primitivo
/*SituaciÃ³n	MÃ©todo que usa JS
Symbol.toPrimitive existe	Se usa ese
Si se espera un nÃºmero	valueOf() â†’ luego toString() si falla
Si se espera un string	toString() â†’ luego valueOf() si falla
Si se espera "default"	valueOf() o toString() segÃºn el motor JS
*/




